pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- ludum dare 48!!
-- deeper and deeper
-- by ripter001

--[[
	1: ★ get something moving.
	2: ★ draw first level.
	3: ★ gravity! (sorta)
	4: jumping!
]]--



-- globals!
gravity = 0.95
friction = 0.95

actors={}

level = {
 x=0,
 y=0,
}

tile=-1



function _init()
 -- init the game yo!
 cls()
 player = actor({
 	x=50,
 	y=110,
 	k=1,
 })
 

	green = actor({
		k=2, x=16, y=16,
		has_gravity=false,
		is_visible=false,
	})
	
	pink = actor({
		k=3,
		has_gravity=false,
		is_visible=false,
	})
	
	orange = actor({
		k=4,
		has_gravity=false,
		is_visible=false,
	})
	
	blue = actor({
		k=6,
		has_gravity=false,
		is_visible=false,
	})
	
end


function debug_log()
 print ("pos "..player.x..","..player.y)
	print ("wall_x "..player.wall_x)
	print ("dx "..player.dx)
	
	local diff = abs(player.wall_x-player.x)
	if player.dir == 1 then
		diff -= 8;	
	elseif player.dir == -1 then
	
	end
	print ("diff "..diff)
	--print ("diff "..(abs(player.x-player.wall_x)*player.dir))
	
	--[[
	local pos = get_tile_pos (player.x, player.y)
	local tile = mget (pos[1], pos[2])
	
	print ("tpos: "..tostr(pos[1])..","..tostr(pos[2]))
	print ("tile: "..tostr(tile))
	print ("floor: "..tostr(player.hit_floor))
	print ("wall: "..tostr(player.hit_wall))
	print ("ceil: "..tostr(player.hit_ceil))
	]]--
	
 --[[
	print ("flags: "..tostr(fget(tile)))
 print ("floor_y "..tostr(player.floor_y))
 ]]--
 
end
-->8
-- core callbacks



function _draw()
 -- lets be wasteful and redraw *everything*
	cls(13)
	-- draw the level
	map (
		level.x, 
		level.y, 
		0, 0, 128, 64)
		
	
	-- the actors must be seen!
	for i=1, #actors do
		actor = actors[i]
	 
	 if (actor.is_visible) do
			spr (
				actor.k, 
				actor.x, 
				actor.y,
				1, 1, -- num sprites
				actor.dir == -1)
				
		end
	end
	
	debug_log()
	
	
end




function _update()
	local speed = 4
	
	-- left/right
	if btnp (⬅️) then
		player.dx -= 1*speed
		player.dir = -1
	elseif btnp (➡️) then
		player.dx += 1*speed
		player.dir = 1
	end
	-- up/down
	if btnp (⬆️) then
		player.dy -= 1*speed
	elseif btnp (⬇️) then
		player.dy += 1*speed
	end
	
	
	-- update all the actors
	for i=1, #actors do 
		local a = actors[i]
		
		-- sets collision flags
		check_collisions(a)
		
		-- gravity
		if a.has_gravity then
			if not a.hit_floor then
				a.dy += gravity
			else
				-- on the floor
				-- align with floor_y
				a.y = a.floor_y-8
				-- allow negative delta y
				a.dy = min(0, a.dy)
			end
		end
		
		-- friction
		if a.dir == 1 and a.dx > 0 then
			-- forward
			a.dx -= friction
			if a.dx < 0 then
				a.dx = 0
			end
		elseif a.dir == -1 and a.dx < 0 then
			-- backwards
			a.dx += friction
			if a.dx > 0 then
				a.dx = 0
			end
		end
		
		-- don't move through walls
		if a.hit_wall then
		 local diff = abs(a.x - a.wall_x)
		 if a.dir == 1 then
		 	diff -= 8 -- sprite width
		 elseif a.dir == -1 then
		 	diff *= -1
		 end
		 -- snap to wall edge
		 a.dx = diff
		end
		
		-- clamp the total delta
		-- we can move each tick
		a.dy = clamp(a.dy, -8, 8)
		a.dx = clamp(a.dx, -8, 8)

		-- get final position		
		local x = a.x + a.dx
		local y = a.y + a.dy
		
		-- don't allow result to put
		-- us inside a wall.
		if not is_solid (get_tile_pos (x, y)) then
			a.x = x
			a.y = y
		end

	end
	
	
end
-->8

-- actors! (thing that move)
function actor (config)
 -- default props
	local star={
		 k= 0, -- sprite 0 index
	  x= 0, -- x position
	  y= 0, -- y position
	  dx= 0, -- delta x per tick
	  dy= 0, -- delta y per tick
	  dir= 1, -- direction x-axis
	  has_gravity= true,
	  is_visible= true,
	  hit_floor= false,
	  hit_wall= false,
	  hit_ceil= false,
	}
	-- mix in the config
	for k, v in pairs(config) do
		star[k] = v
	end
	
	-- add to the actor list
	add(actors, star)
	
	return star
end
-->8
-- collision stuff

-- tiles are 8x8
-- x, y are 0 - 128 (screen pos)
function get_tile_pos(x, y)
 local tile_x = flr (x/8)
	local tile_y = flr (y/8)
	
	-- x,y is the top/left pos
	-- align closer to center
	local diff = abs((tile_x*8) - x)
	if diff > 4 then
		tile_x += 1;
	end
	diff = abs((tile_y*8) - y)
	if diff > 4 then
		tile_y += 1;
	end

	
	tile_x = clamp(tile_x, 0, 128)
	tile_y = clamp(tile_y, 0, 128)
	return {tile_x, tile_y}
end


function is_solid(pos)
 if not pos then return false end
 local tile = mget (pos[1], pos[2])
	return fget (tile) == 1
end


-- sets a bunch of collision flags on a
function check_collisions(a)
	-- get the actors tile position
	local pos = get_tile_pos(a.x, a.y, a)
	
	--debug: player collision
	if a == player then
		green.x = pos[1]*8
		green.y = pos[2]*8
	end

	--
	-- check for floor
	local floor_pos = {
		pos[1], 
		pos[2]+1
	}
	a.hit_floor = is_solid(floor_pos)
	a.floor_y = floor_pos[2]*8;	
	
	--debug: player collision
	if a == player then
		pink.x = floor_pos[1]*8
		pink.y = floor_pos[2]*8
	end
	
	--
	-- check the wall in the
	-- direction we are facing.
	local wall_pos = {
		pos[1] + a.dir,
		pos[2],
	}
	a.hit_wall = is_solid (wall_pos)
	a.wall_x = wall_pos[1]*8
	
	if a.dir == -1 then
		a.wall_x += 8 -- add width
	end
	
	--debug: player collision
	if a == player then
		orange.x = wall_pos[1]*8
		orange.y = wall_pos[2]*8
	end
	
	local ceil_pos = {pos[1], pos[2]-1}
	a.hit_ceil = is_solid (ceil_pos)
	a.ceil_y = ceil_pos[2]*8
	--debug: player collision
	if a == player then
		blue.x = ceil_pos[1]*8
		blue.y = ceil_pos[2]*8
	end
	
end


-->8
-- utils

-- simple clamp
function clamp(val, v_min, v_max)
	if val > v_max then
		return v_max
	elseif val < v_min then
		return v_min
	else
		return val
	end
end
__gfx__
0000000000000000bb000bbbeee000ee9900099988000888cc000ccc00000000000000000000000000000000000000000000000022222222c22222222222222c
0000000000077000b000000be000000e9000000980000008c000000c0000000000000000000000000000000000000000000000002bbbbb02c13333333333311c
0070070000700700b00000000000000e9000000080000000c00000000000000000000000000000000000000000000000000000002bbbbb02c13333333333311c
0007700000700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024bbb402c13333333333311c
0007700000077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024bbb402c13333333333311c
00700700000700000000000be000000000000009000000080000000c0000000000000000000000000000000000000000000000002bbbbb02c13333333333311c
0000000000777000b000000be000000e9000000980000008c000000c0000000000000000000000000000000000000000000000002bbbbb02c13333333333311c
0000000087070788bbb000bbee000eee9990009988800088ccc000cc00000000000000000000000000000000000000000000000022222222c13433333334311c
4444444400070070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13433333334311c
4444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13433333334311c
5555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13333333333311c
4444544400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13333333333311c
4444544400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13333333333311c
4444544400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13333333333311c
5555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c11111111111111c
4444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c22222222222222c
__gff__
0000000000000000000000000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1020000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1020000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
101000000000000000000e0f0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
101010000000000000001e1f000d001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
