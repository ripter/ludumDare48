pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- ludum dare 48!!
-- deeper and deeper
-- by ripter001

--[[
	1: ★ get something moving.
	2: ★ draw first level.
	3: ★ gravity!
	4: ★ jumping!
	4.5: fix control feel
	5: ★ sliding doors
	6: switching levels
	7: dumb monsters
	8: score
	9: intro/exit screens
	10:restart game
]]--



-- globals!
gravity = 0.5
friction = 3.7
speed = 4

actors={}
doors={}

level = {
 x=0,
 y=0,
}

-- sprites used to load objs
door_k = 80
player_k = 1






function _init()
 -- init the game yo!
 cls()
 player = actor({
 	k=1, x=50, y=110,
 	can_open_door=true,
 })
 
	load_level(1)
end


function debug_log()
	local a = player
	--print ("pos "..a.x..","..a.y)
	--print (a.debug)
end
-->8
-- core callbacks



function _draw()
 -- lets be wasteful and redraw *everything*
	cls(13)
	-- draw the level
	map (
		level.x, 
		level.y, 
		0, 0, 128, 64)
		
	
	-- the actors must be seen!
	for i=1, #actors do
		actor = actors[i]
	 
	 if (actor.is_visible) do
			spr (
				actor.k, 
				actor.x, 
				actor.y,
				1, 1,
				actor.dir == -1)
				
		end
	end
	
	debug_log()
end




function _update()
	-- left/right
	if btn (⬅️) then
		player.dx -= speed
		player.dir = -1
	elseif btn (➡️) then
		player.dx += speed
		player.dir = 1
	end
	-- up/down
	if btnp (⬆️) then
		if player.hit_floor then
			player.dy -= speed
		end
	--elseif btnp (⬇️) then
	--	player.dy += speed
	end
	
	
	-- update all the actors
	for i=1, #actors do 
		local a = actors[i]
		
		-- sets collision flags
		check_collisions(a)
		
		apply_gravity(a)
		apply_friction(a)
		
		
		-- don't move through walls
		if a.hit_wall then
		 local diff = abs(a.x - a.wall_x)
		 if a.dir == 1 then
		 	diff -= 8 -- sprite width
		 elseif a.dir == -1 then
		 	diff *= -1
		 end
		 -- snap to wall edge
		 a.dx = diff
		end
		
		apply_door(a)
		
		
		-- clamp the total delta
		-- we can move each tick
		a.dy = clamp(a.dy, -8, 8)
		a.dx = clamp(a.dx, -8, 8)

		-- get final position		
		local x = a.x + a.dx
		local y = a.y + a.dy
		
		-- don't allow result to put
		-- us inside a wall.
		if not is_solid (get_tile_pos (x, y)) then
			a.x = x
			a.y = y
		end

	end
	
	-- update door states
	foreach (doors, update_door)
	
end
-->8

-- actors! (thing that move)
function actor (config)
 -- default props
	local star={
		 k= 0, -- sprite 0 index
	  x= 0, -- x position
	  y= 0, -- y position
	  dx= 0, -- delta x per tick
	  dy= 0, -- delta y per tick
	  dir= 1, -- direction x-axis
	  has_gravity= true,
	  is_visible= true,
	  hit_floor= false,
	  hit_wall= false,
	  hit_ceil= false,
	  can_open_door= false,
	}
	-- mix in the config
	for k, v in pairs(config) do
		star[k] = v
	end
	
	-- add to the actor list
	add(actors, star)
	
	return star
end


function door(config)
 local star = {
 	start_x=0,
 	end_x=0,
 	center_x=0,
 	hit_by=nil,
 	hit_dir="",
 	is_open=false,
 }
 
 -- mix in the config
	for k, v in pairs(config) do
		star[k] = v
	end
	
 add(doors, star)
 return star
end
-->8
-- collision stuff

--
-- tiles are 8x8
-- x, y are 0 - 128 (screen pos)
function get_tile_pos(x, y)
 local tile_x = flr (x/8)
	local tile_y = flr (y/8)
	
	-- x,y is the top/left pos
	-- align closer to center
	local diff = abs((tile_x*8) - x)
	if diff > 4 then
		tile_x += 1;
	end
	diff = abs((tile_y*8) - y)
	if diff > 4 then
		tile_y += 1;
	end

	
	tile_x = clamp(tile_x, 0, 128)
	tile_y = clamp(tile_y, 0, 128)
	return {tile_x, tile_y}
end





--
-- sets a bunch of collision flags on a
function check_collisions(a)
	-- get the actors tile position
	local pos = get_tile_pos(a.x, a.y, a)
	
	-- floor hit test
	local floor_pos = {pos[1], pos[2]+1}
	a.hit_floor = is_solid(floor_pos)
	a.floor_y = (floor_pos[2]*8)-8;	
	
	-- wall hit test
	local wall_pos = {pos[1] + a.dir, pos[2]}
	a.hit_wall = is_solid (wall_pos)
	a.wall_x = wall_pos[1]*8
	
	if a.dir == -1 then
		a.wall_x += 8 -- add width
	end
	
	-- ceiling hit test
	local ceil_pos = {pos[1], pos[2]-1}
	a.hit_ceil = is_solid (ceil_pos)
	a.ceil_y = (ceil_pos[2]*8)
	
end


-->8
-- utils

--
--
function is_solid(pos)
 if not pos then return false end
 local tile = mget (pos[1], pos[2])
	return fget (tile) == 1
end

--
--
function is_door(pos)
 if not pos then return false end
 local tile = mget (pos[1], pos[2])
	return fget (tile) == 2
end

-- get the door obj by pos
function get_door(pos)
	for d in all(doors) do
		-- if at left door
		if d.start_x == pos[1]
			and d.y == pos[2] then
				return d
		-- if at right door
		elseif d.start_x == pos[1]-1
			and d.y == pos[2] then
				return d
		end
	end
end

-- simple clamp
function clamp(val, v_min, v_max)
	if val > v_max then
		return v_max
	elseif val < v_min then
		return v_min
	else
		return val
	end
end
-->8
-- update functions

-- gravity
function apply_gravity(a)
	if not a.has_gravity then return end

	if a.hit_floor then
		-- align with floor_y
		a.y = a.floor_y
		-- allow negative delta y
		a.dy = min(0, a.dy)
	else
		-- we are in the air!
		a.dy += gravity
	end
end

-- friction
function apply_friction(a)
		-- friction
		if a.dir == 1 and a.dx > 0 then
			-- forward
			a.dx -= friction
			if a.dx < 0 then
				a.dx = 0
			end
		elseif a.dir == -1 and a.dx < 0 then
			-- backwards
			a.dx += friction
			if a.dx > 0 then
				a.dx = 0
			end
		end
end

-- actor updates door on collision
function apply_door(a)
	if not a.can_open_door then return end	
 local pos = get_tile_pos(a.x, a.y)
	local door = get_door(pos)
	if not door then return end
	door.hit_by = a
end


-- update the door state
function update_door(door)
	-- if we are not hit, and closed
	-- clear hit direction
	if not door.hit_by
	 and not door.is_open then
	 	door.hit_dir = ""
	end
	

	if door.hit_by then
		local pos = get_tile_pos(door.hit_by.x, door.hit_by.y)
		-- if we are hit, and no dir
		-- set the hit_dir
		if door.hit_dir == "" then
			if pos[1] == door.start_x then
				door.hit_dir = "left"
			elseif pos[1] == door.end_x then
				door.hit_dir = "right"
			end
		end
		
		-- update door sprites
		if door.hit_dir == "left" then
			if pos[1] == door.start_x then
				mset (door.start_x, door.y-1, 64)
				mset (door.end_x, door.y-1, 65)
				mset (door.start_x, door.y, 80)
				mset (door.end_x, door.y, 81)
				door.is_open = false
			elseif pos[1] == door.end_x then
				mset (door.start_x, door.y-1, 78)
				mset (door.end_x, door.y-1, 79)
				mset (door.start_x, door.y, 94)
				mset (door.end_x, door.y, 95)
				door.is_open = true
			end
		elseif door.hit_dir == "right" then
			if pos[1] == door.start_x then
				mset (door.start_x, door.y-1, 76)
				mset (door.end_x, door.y-1, 77)
				mset (door.start_x, door.y, 92)
				mset (door.end_x, door.y, 93)
				door.is_open = true
			elseif pos[1] == door.end_x then
				mset (door.start_x, door.y-1, 64)
				mset (door.end_x, door.y-1, 65)
				mset (door.start_x, door.y, 80)
				mset (door.end_x, door.y, 81)
				door.is_open = false
			end
		end
	end

	-- we handled the hit
	door.hit_by = nil
end

-->8
-- loaders

function load_level(num)
	if num == 1 then
		level = {x=0, y=0}
	elseif num == 2 then
		--level = {x=16, y=0}
		camera (128,0)
	end
	
	-- reset lists
	actors = {}
	doors = {}
	-- add the player back in
	add (actors, player)
	
	-- search the map for spawn points
	for x=0,128 do
		for y=0,128 do
			local tile = mget(x, y)
			
			-- upgrade doors
			if tile == door_k then
				door({
					y = y,
					start_x = x,
					end_x = x+1,
				})
			end
			
			-- position player
			if tile == player_k then
				player.x = x
				player.y = y
				
			end
		end
	end
	
end
__gfx__
0000000000000000bb000bbbeee000ee9900099988000888cc000ccc000000000000000000000000000000000000000000000000222222220000000000000000
0000000000077000b000000be000000e9000000980000008c000000c0000000000000000000000000000000000000000000000002bbbbb020000000000000000
0070070000700700b00000000000000e9000000080000000c00000000000000000000000000000000000000000000000000000002bbbbb020000000000000000
0007700000700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024bbb4020000000000000000
0007700000077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024bbb4020000000000000000
00700700000700000000000be000000000000009000000080000000c0000000000000000000000000000000000000000000000002bbbbb020000000000000000
0000000000777000b000000be000000e9000000980000008c000000c0000000000000000000000000000000000000000000000002bbbbb020000000000000000
0000000087070788bbb000bbee000eee9990009988800088ccc000cc000000000000000000000000000000000000000000000000222222220000000000000000
44444444000700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44445444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44445444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44445444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c22222222222222cc22222222222222cc22222222222222cc22222222222222cc22222222222222cc22222222222222cc22222222222222cc22222222222222c
c13333333333331cc11333333333311cc11133333333311cc11113333333311cc11111333333311cc11111133333311cc13333111111111cc11111111133331c
c13333333333331cc11333333333311cc11133333333311cc11113333333311cc11111333333311cc11111133333311cc13333111111111cc11111111133331c
c13333333333331cc11333333333311cc11133333333311cc11113333333311cc11111333333311cc11111133333311cc13333111111111cc11111111133331c
c13333333333331cc11333333333311cc11133333333311cc11113333333311cc11111333333311cc11111133333311cc13333111111111cc11111111133331c
c13333333333331cc11333333333311cc11133333333311cc11113333333311cc11111333333311cc11111133333311cc13333111111111cc11111111133331c
c13333333333331cc11333333333311cc11133333333311cc11113333333311cc11111333333311cc11111133333311cc13333111111111cc11111111133331c
c13433333334331cc11343333334311cc11134333334311cc11113433334311cc11111343334311cc11111134334311cc13443111111111cc11111111134431c
c13433333334331cc11343333334311cc11134333334311cc11113433334311cc11111343334311cc11111134334311cc13443111111111cc11111111134431c
c13433333334331cc11343333334311cc11134333334311cc11113433334311cc11111343334311cc11111134334311cc13443111111111cc11111111134431c
c13333333333331cc11333333333311cc11133333333311cc11113333333311cc11111333333311cc11111133333311cc13333111111111cc11111111133331c
c13333333333331cc11333333333311cc11133333333311cc11113333333311cc11111333333311cc11111133333311cc13333111111111cc11111111133331c
c13333333333331cc11333333333311cc11133333333311cc11113333333311cc11111333333311cc11111133333311cc13333111111111cc11111111133331c
c13333333333331cc11333333333311cc11133333333311cc11113333333311cc11111333333311cc11111133333311cc13333111111111cc11111111133331c
c13333333333331cc11111111111111cc11111111111111cc11111111111111cc11111111111111cc11111111111111cc13333111111111cc11111111133331c
c22222222222222cc22222222222222cc22222222222222cc22222222222222cc22222222222222cc22222222222222cc22222222222222cc22222222222222c
__gff__
0000000000000000000000000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020202020202020202020202020202020202020202020202020202020202020000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000000000404100000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000010000505100000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000010101010101010101010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010000000000000000040410000001010000000000000404100000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010100000000001000050510000001010000000000000505100000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
