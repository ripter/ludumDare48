pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- ludum dare 48!!
-- deeper and deeper
-- by ripter001

--[[
	1: ★ get something moving.
	2: ★ draw first level.
	3: ★ gravity! (sorta)
	4: jumping!
]]--



-- globals!
gravity = 0.95
friction = 0.95

actors={}

level = {
 x=0,
 y=0,
}

tile=-1

 
function clamp(val, v_min, v_max)
	if val > v_max then
		return v_max
	elseif val < v_min then
		return v_min
	else
		return val
	end
end
	


-->8
-- core callbacks

function _init()
 -- init the game yo!
 cls()
 player = actor({
 	x=50,
 	y=110,
 	k=1
 })
 

	test = actor({
		x=8, y=110, k=2,
		has_gravity=false,
	})
end

function _draw()
 -- lets be wasteful and redraw *everything*
	cls(13)
	-- draw the level
	map (
		level.x, 
		level.y, 
		0, 0, 128, 64)
		
	
	-- the actors must be seen!
	for i=1, #actors do
		actor = actors[i]
	 
	 if (actor.is_visible) do
			spr (
				actor.k, 
				actor.x, 
				actor.y)
		end
	end
	
	
	
	local pos = get_tile_pos (test.x, test.y)
	local tile = mget (pos[1], pos[2])
	
	
	print ("pos: "..tostr(pos[1])..","..tostr(pos[2]))
	print ("tile: "..tostr(tile))
	print ("player x:"..player.x)
	print ("x_diff: "..tostr(player.x_diff))
	--[[
	print ("flags: "..tostr(fget(tile)))
 print ("floor_y "..tostr(player.floor_y))
 ]]--
 
end




function _update()
	local speed = 4
	
	-- left/right
	if btnp (⬅️) then
		player.dx -= 1*speed
		player.dir = -1
	elseif btnp (➡️) then
		player.dx += 1*speed
		player.dir = 1
	end
	-- up/down
	if btnp (⬆️) then
		player.dy -= 1*speed
	elseif btnp (⬇️) then
		player.dy += 1*speed
	end
	
	
	-- update all the actors
	for i=1, #actors do 
		local a = actors[i]
		
		check_collisions(a)
		
		-- gravity
		if a.has_gravity then
			if not a.on_floor then
				a.dy += gravity
			else
				-- on the floor
				-- align with floor_y
				a.y = a.floor_y-8
				-- allow negative delta y
				a.dy = min(0, a.dy)
			end
		end
		
		-- friction
		if a.dir == 1 and a.dx > 0 then
			-- forward
			a.dx -= friction
			if a.dx < 0 then
				a.dx = 0
			end
		elseif a.dir == -1 and a.dx < 0 then
			-- backwards
			a.dx += friction
			if a.dx > 0 then
				a.dx = 0
			end
		end

		-- apply deltas
		a.x += flr(a.dx)
		a.y += flr(a.dy)
	end
	
	
end
-->8

-- actors! (thing that move)
function actor (config)
 -- default props
	local star={
	  x= 0, -- x position
	  y= 0, -- y position
	  k= 0, -- sprite 0 index
	  dx= 0, -- delta x per tick
	  dy= 0, -- delta y per tick
	  dir= 1, -- direction x-axis
	  has_gravity= true,
	  is_visible= true,
	  on_floor= false,
	  -- tmp
	  x_diff=0,
	}
	-- mix in the config
	for k, v in pairs(config) do
		star[k] = v
	end
	
	-- add to the actor list
	add(actors, star)
	
	return star
end
-->8
-- collision stuff

-- tiles are 8x8
-- x, y are 0 - 128 (screen pos)
function get_tile_pos(x, y, a)
 local tile_x = flr (x/8)
	local tile_y = flr (y/8)
	
	-- x,y is the top/left pos
	-- align closer to center
	local diff = abs((tile_x*8) - x)
	if diff >= 5 then
		tile_x += 1;
	end
	diff = abs((tile_y*8) - y)
	if diff >= 5 then
		tile_y += 1;
	end

	
	tile_x = clamp(tile_x, 0, 128)
	tile_y = clamp(tile_y, 0, 128)
	return {tile_x, tile_y}
end


function is_solid(pos)
 if not pos then return false end
 local tile = mget (pos[1], pos[2])
	return fget (tile) == 1
end


-- sets a bunch of collision flags on a
function check_collisions(a)
	-- get the actors tile position
	local pos = get_tile_pos(a.x, a.y, a)
	
	--debug: show check pos
	test.x = pos[1]*8
	test.y = pos[2]*8
	
	-- get floor tile
	local floor_pos = {
		pos[1], 
		pos[2]+1
	}
	a.on_floor = is_solid(floor_pos)
	a.floor_y = floor_pos[2]*8;	
	
	
	
	local wall_pos = {
		pos[1],
		pos[2],
	}
	if a.dir == 1 then
		wall_pos[1] += 1
	elseif a.dir == -1 then
		wall_pos[1] -= 2
	end
	
	
end


__gfx__
00000000c0000000bb000bbb0000000000000000000000000000000000000000000000000000000000000000000000000000000022222222c22222222222222c
0000000000077000b000000b000000000000000000000000000000000000000000000000000000000000000000000000000000002bbbbb02c13333333333311c
0070070000700700b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bbbbb02c13333333333311c
0007700000700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024bbb402c13333333333311c
0007700000077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024bbb402c13333333333311c
00700700000700000000000b000000000000000000000000000000000000000000000000000000000000000000000000000000002bbbbb02c13333333333311c
0000000000777000b000000b000000000000000000000000000000000000000000000000000000000000000000000000000000002bbbbb02c13333333333311c
0000000087070788bbb000bb0000000000000000000000000000000000000000000000000000000000000000000000000000000022222222c13433333334311c
4444444400070070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13433333334311c
4444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13433333334311c
5555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13333333333311c
4444544400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13333333333311c
4444544400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13333333333311c
4444544400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c13333333333311c
5555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c11111111111111c
4444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c22222222222222c
__gff__
0000000000000000000000000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1020000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1020000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
101000000000000000000e0f0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
101010000000000000001e1f000d001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
